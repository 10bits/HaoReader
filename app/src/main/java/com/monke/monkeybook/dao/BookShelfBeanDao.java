package com.monke.monkeybook.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.monke.monkeybook.bean.BookShelfBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BOOK_SHELF_BEAN".
*/
public class BookShelfBeanDao extends AbstractDao<BookShelfBean, String> {

    public static final String TABLENAME = "BOOK_SHELF_BEAN";

    /**
     * Properties of entity BookShelfBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property NoteUrl = new Property(0, String.class, "noteUrl", true, "NOTE_URL");
        public final static Property DurChapter = new Property(1, Integer.class, "durChapter", false, "DUR_CHAPTER");
        public final static Property DurChapterPage = new Property(2, Integer.class, "durChapterPage", false, "DUR_CHAPTER_PAGE");
        public final static Property DurChapterPageSize = new Property(3, Integer.class, "durChapterPageSize", false, "DUR_CHAPTER_PAGE_SIZE");
        public final static Property FinalDate = new Property(4, Long.class, "finalDate", false, "FINAL_DATE");
        public final static Property HasUpdate = new Property(5, Boolean.class, "hasUpdate", false, "HAS_UPDATE");
        public final static Property NewChapters = new Property(6, Integer.class, "newChapters", false, "NEW_CHAPTERS");
        public final static Property Tag = new Property(7, String.class, "tag", false, "TAG");
        public final static Property SerialNumber = new Property(8, Integer.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property FinalRefreshData = new Property(9, Long.class, "finalRefreshData", false, "FINAL_REFRESH_DATA");
        public final static Property Group = new Property(10, Integer.class, "group", false, "GROUP");
        public final static Property DurChapterName = new Property(11, String.class, "durChapterName", false, "DUR_CHAPTER_NAME");
        public final static Property LastChapterName = new Property(12, String.class, "lastChapterName", false, "LAST_CHAPTER_NAME");
        public final static Property ChapterListSize = new Property(13, Integer.class, "chapterListSize", false, "CHAPTER_LIST_SIZE");
        public final static Property CustomCoverPath = new Property(14, String.class, "customCoverPath", false, "CUSTOM_COVER_PATH");
        public final static Property UpdateOff = new Property(15, Boolean.class, "updateOff", false, "UPDATE_OFF");
    }


    public BookShelfBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BookShelfBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BOOK_SHELF_BEAN\" (" + //
                "\"NOTE_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: noteUrl
                "\"DUR_CHAPTER\" INTEGER," + // 1: durChapter
                "\"DUR_CHAPTER_PAGE\" INTEGER," + // 2: durChapterPage
                "\"DUR_CHAPTER_PAGE_SIZE\" INTEGER," + // 3: durChapterPageSize
                "\"FINAL_DATE\" INTEGER," + // 4: finalDate
                "\"HAS_UPDATE\" INTEGER," + // 5: hasUpdate
                "\"NEW_CHAPTERS\" INTEGER," + // 6: newChapters
                "\"TAG\" TEXT," + // 7: tag
                "\"SERIAL_NUMBER\" INTEGER," + // 8: serialNumber
                "\"FINAL_REFRESH_DATA\" INTEGER," + // 9: finalRefreshData
                "\"GROUP\" INTEGER," + // 10: group
                "\"DUR_CHAPTER_NAME\" TEXT," + // 11: durChapterName
                "\"LAST_CHAPTER_NAME\" TEXT," + // 12: lastChapterName
                "\"CHAPTER_LIST_SIZE\" INTEGER," + // 13: chapterListSize
                "\"CUSTOM_COVER_PATH\" TEXT," + // 14: customCoverPath
                "\"UPDATE_OFF\" INTEGER);"); // 15: updateOff
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BOOK_SHELF_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, BookShelfBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
 
        Integer durChapter = entity.getDurChapter();
        if (durChapter != null) {
            stmt.bindLong(2, durChapter);
        }
 
        Integer durChapterPage = entity.getDurChapterPage();
        if (durChapterPage != null) {
            stmt.bindLong(3, durChapterPage);
        }
 
        Integer durChapterPageSize = entity.getDurChapterPageSize();
        if (durChapterPageSize != null) {
            stmt.bindLong(4, durChapterPageSize);
        }
 
        Long finalDate = entity.getFinalDate();
        if (finalDate != null) {
            stmt.bindLong(5, finalDate);
        }
 
        Boolean hasUpdate = entity.getHasUpdate();
        if (hasUpdate != null) {
            stmt.bindLong(6, hasUpdate ? 1L: 0L);
        }
 
        Integer newChapters = entity.getNewChapters();
        if (newChapters != null) {
            stmt.bindLong(7, newChapters);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(8, tag);
        }
 
        Integer serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindLong(9, serialNumber);
        }
 
        Long finalRefreshData = entity.getFinalRefreshData();
        if (finalRefreshData != null) {
            stmt.bindLong(10, finalRefreshData);
        }
 
        Integer group = entity.getGroup();
        if (group != null) {
            stmt.bindLong(11, group);
        }
 
        String durChapterName = entity.getDurChapterName();
        if (durChapterName != null) {
            stmt.bindString(12, durChapterName);
        }
 
        String lastChapterName = entity.getLastChapterName();
        if (lastChapterName != null) {
            stmt.bindString(13, lastChapterName);
        }
 
        Integer chapterListSize = entity.getChapterListSize();
        if (chapterListSize != null) {
            stmt.bindLong(14, chapterListSize);
        }
 
        String customCoverPath = entity.getCustomCoverPath();
        if (customCoverPath != null) {
            stmt.bindString(15, customCoverPath);
        }
 
        Boolean updateOff = entity.getUpdateOff();
        if (updateOff != null) {
            stmt.bindLong(16, updateOff ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, BookShelfBean entity) {
        stmt.clearBindings();
 
        String noteUrl = entity.getNoteUrl();
        if (noteUrl != null) {
            stmt.bindString(1, noteUrl);
        }
 
        Integer durChapter = entity.getDurChapter();
        if (durChapter != null) {
            stmt.bindLong(2, durChapter);
        }
 
        Integer durChapterPage = entity.getDurChapterPage();
        if (durChapterPage != null) {
            stmt.bindLong(3, durChapterPage);
        }
 
        Integer durChapterPageSize = entity.getDurChapterPageSize();
        if (durChapterPageSize != null) {
            stmt.bindLong(4, durChapterPageSize);
        }
 
        Long finalDate = entity.getFinalDate();
        if (finalDate != null) {
            stmt.bindLong(5, finalDate);
        }
 
        Boolean hasUpdate = entity.getHasUpdate();
        if (hasUpdate != null) {
            stmt.bindLong(6, hasUpdate ? 1L: 0L);
        }
 
        Integer newChapters = entity.getNewChapters();
        if (newChapters != null) {
            stmt.bindLong(7, newChapters);
        }
 
        String tag = entity.getTag();
        if (tag != null) {
            stmt.bindString(8, tag);
        }
 
        Integer serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindLong(9, serialNumber);
        }
 
        Long finalRefreshData = entity.getFinalRefreshData();
        if (finalRefreshData != null) {
            stmt.bindLong(10, finalRefreshData);
        }
 
        Integer group = entity.getGroup();
        if (group != null) {
            stmt.bindLong(11, group);
        }
 
        String durChapterName = entity.getDurChapterName();
        if (durChapterName != null) {
            stmt.bindString(12, durChapterName);
        }
 
        String lastChapterName = entity.getLastChapterName();
        if (lastChapterName != null) {
            stmt.bindString(13, lastChapterName);
        }
 
        Integer chapterListSize = entity.getChapterListSize();
        if (chapterListSize != null) {
            stmt.bindLong(14, chapterListSize);
        }
 
        String customCoverPath = entity.getCustomCoverPath();
        if (customCoverPath != null) {
            stmt.bindString(15, customCoverPath);
        }
 
        Boolean updateOff = entity.getUpdateOff();
        if (updateOff != null) {
            stmt.bindLong(16, updateOff ? 1L: 0L);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public BookShelfBean readEntity(Cursor cursor, int offset) {
        BookShelfBean entity = new BookShelfBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // noteUrl
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // durChapter
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // durChapterPage
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // durChapterPageSize
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // finalDate
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0, // hasUpdate
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // newChapters
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // tag
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // serialNumber
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9), // finalRefreshData
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // group
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // durChapterName
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // lastChapterName
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // chapterListSize
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // customCoverPath
            cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0 // updateOff
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, BookShelfBean entity, int offset) {
        entity.setNoteUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDurChapter(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setDurChapterPage(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDurChapterPageSize(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setFinalDate(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setHasUpdate(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
        entity.setNewChapters(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTag(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSerialNumber(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setFinalRefreshData(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
        entity.setGroup(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setDurChapterName(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setLastChapterName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setChapterListSize(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCustomCoverPath(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUpdateOff(cursor.isNull(offset + 15) ? null : cursor.getShort(offset + 15) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(BookShelfBean entity, long rowId) {
        return entity.getNoteUrl();
    }
    
    @Override
    public String getKey(BookShelfBean entity) {
        if(entity != null) {
            return entity.getNoteUrl();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(BookShelfBean entity) {
        return entity.getNoteUrl() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
